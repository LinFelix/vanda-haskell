-----------------------------------------------------------------------------
-- |
-- Module      :  ActiveParser
-- Copyright   :  (c) Thomas Ruprecht 2017
-- License     :  Redistribution and use in source and binary forms, with
--                or without modification, is ONLY permitted for teaching
--                purposes at Technische Universität Dresden AND IN
--                COORDINATION with the Chair of Foundations of Programming.
--
-- Maintainer  :  thomas.ruprecht@tu-dresden.de
-- Stability   :  unknown
-- Portability :  portable
--
-- This module provides two functions for parsing words using the active
-- parsing algorithm by Burden and Ljunglöf.
-- @weightedParse@ uses a weighted PMCFG to find a list of all possible
-- derivation trees ordered by minimal cost / maximum probability. The
-- rules' weigthts need to be instances of @Monoid@ and @Dividable@.
-- @parse@ uses an unweighted grammar to find a list of derivation trees
-- ordered by least rule applications.
--
-- The parsing algorithm uses active and passive items to represent
-- possible subwords generated by a certain non-terminal. Whereas active
-- items represent an incomplete derivation (not all terminals of a rule 
-- are compared to the terminals of the word or not all non-terminals in 
-- the rule were replaced by valid subwords), passive items represent a full
-- rule application and thus a valid possible subword generated by rule.
-- To find all valid rule applications that generate a subword we want to 
-- parse, there are 4 different type of deductive rules applied until a
-- passive item is generated of the grammar's rule:
--
-- * prediction: an empty active item is generated by a grammar rule
-- * completion (terminal): a terminal symbol in the grammar rule's
-- composition function is read and replaced by the position in the word,
-- thus it should fit into the word and resulting ranges of neighboring 
-- symbols
-- * completion (non-terminal): a variable is replaced by a range of a
-- generated subword in the word, like a read terminal the resulting range
-- should fit in its environment
-- * conversion: if there are no symbols left to substitute by a range in
-- the current function component, the item marked to use the next componen;
-- if there are no components left, a passive item is created
--
-- In the end, all passive items are returned, as they are validly generated
-- subwords of the word to parse. These items are then filtered to be
-- generated by a staring non-terminal and generating the whole word.
--
-----------------------------------------------------------------------------

{-# LANGUAGE ScopedTypeVariables #-}


module Vanda.Grammar.PMCFG.ActiveParser
    ( parse
    , weightedParse
    ) where

import Vanda.Grammar.PMCFG
import Vanda.Grammar.PMCFG.Range
import Vanda.Grammar.PMCFG.DeductiveSolver
import Vanda.Grammar.PMCFG.Weights

import qualified Data.IntMap       as IMap
import qualified Data.HashMap.Lazy as Map
import qualified Data.Array        as A

import Data.Hashable (Hashable(hashWithSalt))
import Data.Tree (Tree(Node))
import Data.Maybe (mapMaybe, maybeToList)
import Data.Group (Group(invert))
import Data.Monoid ((<>))


data Item nt t wt = Passive nt Rangevector (Tree Int) wt
                  | Active Int [Range] (Function t) (IMap.IntMap (Rangevector, Tree Int)) wt


instance (Eq nt, Eq t) => Eq (Item nt t wt)where
  (Active r rs fs completions _) == (Active r' rs' fs' completions' _) = r == r' && rs == rs' && completions == completions' && fs == fs'
  (Passive a rv d _ ) == (Passive a' rv' d' _) = a == a' && rv == rv' && d == d'
  _ == _ = False

instance (Hashable nt) => Hashable (Item nt t wt) where
  salt `hashWithSalt` (Passive a rho _ _) = salt `hashWithSalt` a `hashWithSalt` rho
  salt `hashWithSalt` (Active r _ fss _ _) = salt `hashWithSalt` r `hashWithSalt` length (concat fss)
    

instance (Show nt, Show t) => Show (Item nt t wt) where
  show (Passive a rv _ _) = "[Passive] " ++ show a ++ " " ++ show rv
  show (Active r rv f _ _) = "[Active] rule #" ++ show r ++ " " ++ show rv ++ " " ++ prettyPrintComposition f


type Container nt t wt =  (Map.HashMap nt [Item nt t wt] , Map.HashMap nt [Item nt t wt])

-- | Top-level function to parse a word using a PMCFG.
-- Uses weightedParse with additive costs for each rule, s.t. the number of rule applications is minimized.
parse :: (Hashable nt, Eq nt, Eq t) 
  => PMCFG nt t 
  -> Int 
  -> [t] 
  -> [Tree (Rule nt t)]
parse (PMCFG s rs) = weightedParse $ WPMCFG s $ zip rs $ repeat (cost 1 :: Cost Double)


-- | Top-level function to parse a word using a weighted PMCFG.
weightedParse :: forall nt t wt. (Hashable nt, Eq nt, Eq t, Ord wt, Group wt) 
              => WPMCFG nt wt t 
              -> Int 
              -> [t] 
              -> [Tree (Rule nt t)]
weightedParse (WPMCFG s rs) bw w = map (\ (Passive _ _ t _) -> fmap (fst . (rs' A.!)) t) 
                                    $ filter resultfilter
                                    $ solve ds
    where
        rs' = A.listArray (1, length rs) rs
        insides = insideWeights rs
        outsides = outsideWeights insides rs s
        
        ds = DeductiveSolver (Map.empty, Map.empty) 
                             update 
                             ( initialPrediction w s rs' insides 
                              : predictionRule w rs' insides outsides 
                              : conversionRule rs' outsides
                              : [completionRule w rs' insides outsides] ) 
                             bw

        update :: Container nt t wt -> Item nt t wt -> Container nt t wt
        update (p, a) item@(Passive nta _ _ _)   = (updateGroup nta item p, a)
        update (p, a) item@(Active r _ ((Var i _:_):_) _ _)  = (p, updateGroup nta item a)
          where nta = antecedents (rs' A.! r) !! i
        update (p, a) _ = (p, a)

        resultfilter :: Item nt t wt -> Bool
        resultfilter (Passive a rho _ _) = a `elem` s && rho == singleton (entire w)
        resultfilter _                   = False 


initialPrediction :: forall nt t wt. (Hashable nt, Eq nt, Monoid wt, Eq t) 
                  => [t]
                  -> [nt]
                  -> A.Array Int (Rule nt t, wt)
                  -> Map.HashMap nt wt
                  -> DeductiveRule (Item nt t wt) wt (Container nt t wt)
initialPrediction word s rs insides = DeductiveRule 0 gets app
  where
    srules = filter (\ (_, (Rule ((a, _), _), _)) -> a `elem` s) $ A.assocs rs

    gets :: Container nt t wt -> Item nt t wt -> [[Item nt t wt]]
    gets _ _ = [[]]

    app :: Container nt t wt -> [Item nt t wt] -> [(Item nt t wt, wt)]
    app _ [] =  [ (Active r rho' f' IMap.empty inside, inside) 
                | (r, (Rule ((_, as), f), w)) <- srules
                , (rho', f') <- completeKnownTokens word IMap.empty [Epsilon] f
                , let inside = w <> mconcat (map (insides Map.!) as)
                ]
    app _ _ = []



predictionRule :: forall nt t wt. (Group wt, Eq nt, Hashable nt, Eq t) 
               => [t]
               -> A.Array Int (Rule nt t, wt)
               -> Map.HashMap nt wt
               -> Map.HashMap nt wt
               -> DeductiveRule (Item nt t wt) wt (Container nt t wt)
predictionRule w rs insides outsides = DeductiveRule 1 gets app
  where
    gets :: Container nt t wt -> Item nt t wt -> [[Item nt t wt]]
    gets _ item@(Active _ _ ((Var _ _:_):_) _ _) = [[item]]
    gets _ _ = []
    
    app :: Container nt t wt 
        -> [Item nt t wt] 
        -> [(Item nt t wt, wt)]
    app _ [Active r _ ((Var i _:_):_) _ _] = [ (Active r' rho'' f'' IMap.empty inside, inside <> outside)
                                             | let a = antecedents (rs A.! r) !! i
                                             , (r', (Rule ((a', as'), f'), w')) <- A.assocs rs
                                             , a' == a
                                             , (rho'', f'') <- completeKnownTokens w IMap.empty [Epsilon] f'
                                             , let inside = w' <> mconcat (map (insides Map.!) as')
                                                   outside = outsides Map.! a'
                                             ]
    app _ _ = []



conversionRule :: forall nt t wt. (Monoid wt, Hashable nt, Eq nt)
               => A.Array Int (Rule nt t, wt)
               -> Map.HashMap nt wt
               -> DeductiveRule (Item nt t wt) wt (Container nt t wt)
conversionRule rules outsides = DeductiveRule 1 gets app
  where
    gets :: Container nt t wt -> Item nt t wt -> [[Item nt t wt]]
    gets _ i@(Active _ _ [] _ _) = [[i]]
    gets _ _ = []

    app :: Container nt t wt -> [Item nt t wt] -> [(Item nt t wt, wt)]
    app _ [Active r rs [] completions inside] = [ (Passive a rv d inside, inside <> outside)
                                                | rv <- maybeToList $ fromList $ reverse rs
                                                , let d = Node r $ map snd $ IMap.elems completions
                                                      a = lhs $ rules A.! r
                                                      outside = outsides Map.! a
                                                ]
    app _ _ = []

completeKnownTokens :: (Eq t) => [t] -> IMap.IntMap (Rangevector, Tree Int) -> [Range] -> Function t -> [([Range], Function t)]
completeKnownTokens _ _ rs [[]] = [(rs, [])]
completeKnownTokens w m rs ([]:fs) = completeKnownTokens w m (Epsilon:rs) fs
completeKnownTokens w m (r:rs) ((T t:fs):fss) = [ (r':rs, fs:fss)
                                                | r' <- mapMaybe (safeConc r) $ singletons t w
                                                ] >>= uncurry (completeKnownTokens w m)
completeKnownTokens w m (r:rs) ((Var i j:fs):fss) = case i `IMap.lookup` m of
                                                    Just (rv, _) -> case safeConc r (rv ! j) of
                                                                         Just r' -> completeKnownTokens w m (r':rs) (fs:fss)
                                                                         Nothing -> []
                                                    Nothing -> [(r:rs, (Var i j:fs):fss)]
completeKnownTokens _ _ _ _ = []
    

completionRule :: forall nt t wt. (Hashable nt, Eq nt, Eq t, Group wt) 
                        => [t]
                        -> A.Array Int (Rule nt t, wt)
                        -> Map.HashMap nt wt
                        -> Map.HashMap nt wt
                        -> DeductiveRule (Item nt t wt) wt (Container nt t wt)
completionRule w rules insides outsides = DeductiveRule 2 gets app
  where
    gets :: Container nt t wt -> Item nt t wt -> [[Item nt t wt]]
    gets (passives, _) active@(Active r _ ((Var i _:_):_) _ _) = [ [passive, active]
                                                                 | let a = antecedents (rules A.! r) !! i
                                                                 , passive <- Map.lookupDefault [] a passives 
                                                                 ]
    gets (_, actives) passive@(Passive a _ _ _) =  [ [passive, active]
                                                   | active <- Map.lookupDefault [] a actives
                                                   ]
    gets _ _ = []

    app :: Container nt t wt -> [Item nt t wt] -> [(Item nt t wt, wt)]
    app _ [Passive a rv d piw, Active r (range:rho) ((Var i j:fs):fss) c aiw] = [ (Active r rho' f' c' inside, inside <> outside)
                                                                                | range' <- maybeToList $ safeConc range (rv ! j)
                                                                                , let c' = IMap.insert i (rv, d) c
                                                                                      inside = aiw <> invert (insides Map.! a) <> piw
                                                                                      outside = outsides Map.! a
                                                                                , (rho', f') <- completeKnownTokens w c' (range':rho) (fs:fss)
                                                                                ]
    app _ _ = []
